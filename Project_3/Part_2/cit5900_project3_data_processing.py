# -*- coding: utf-8 -*-
"""cit5900_project3_data_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/117ThlPiNbCLSiRnGm1G_FcUcIS1v2xgX
"""

import pandas as pd

# read populated_data.pkl
try:
  with open('populated_data.pkl', 'rb') as f:
    data = pd.read_pickle(f)
except FileNotFoundError:
    print('populated_data.pkl not found')

# Keep first 14 columns and doi
columns_to_keep = list(data.columns[:14])
columns_to_keep.append("doi")

data = data[columns_to_keep]

# write the data as a csv
data.to_csv("data_to_scrape.csv", index=False)

# read dataset_data
try:
  with open("dataset_data.csv", "r") as f:
    datasets = pd.read_csv(f)
except FileNotFoundError:
    print("dataset_data.csv not found")

# collect unique terms from dataset column
dataset_terms = datasets["dataset"].unique()

# Remove word terms from dataset_terms
dataset_terms = [term for term in dataset_terms if "terms" not in term]

# Convert to pandas
dataset_terms = pd.DataFrame(dataset_terms, columns=["terms"])

# write the terms as a csv
dataset_terms.to_csv("dataset_terms.csv", index=False)

first_page = str(100)
last_page = str(105)
# combine first page and last page with -
page_range = first_page + "-" + last_page
print(page_range)

publication_date = "2020-03-21"
# Get publication month from date
publication_month = publication_date.split("-")[1]
print(publication_month)

# cut data to just first five observations
data = data.head(5)

# Load new file to create output matches for deeper analysis
try:
  with open("old_output_matches.csv", "r") as f:
    df = pd.read_csv(f)
except FileNotFoundError:
    print("old_output_matches.csv not found")

# Drop missing values and split terms
terms = df["matched_dataset_terms"].dropna().str.split(";")

# Remove word terms from dataset_terms
terms = [term for term in terms if "terms" not in term]

# Flatten and clean up the list
all_terms = set()
for term_list in terms:
    for term in term_list:
        clean_term = term.strip()
        if clean_term:
            all_terms.add(clean_term)

# Convert to DataFrame and save
terms_df = pd.DataFrame(sorted(all_terms))
terms_df.to_csv("new_dataset_terms.csv", index=False, header=False)